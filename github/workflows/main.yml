# Main CI/CD Pipeline
# This workflow handles the complete CI/CD process including:
# - Running tests
# - Security scanning
# - Building and pushing Docker images
# - Deploying infrastructure with Terraform
# - Deploying to ECS with zero downtime

name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: microservice-app
  TERRAFORM_VERSION: 1.0.0

permissions:
  id-token: write   # Required for OIDC
  contents: read    # Required for checkout

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          cd frontend && npm install
          cd ../backend && npm install

      - name: Run unit tests
        run: |
          cd frontend && npm test
          cd ../backend && npm test

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform

      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: |
            frontend/Dockerfile
            backend/Dockerfile

  create-monitoring:
    name: Create Monitoring Infrastructure
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_NAME }}-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Create Monitoring Module
        run: |
          mkdir -p terraform/modules/monitoring
          cat > terraform/modules/monitoring/main.tf << 'EOF'
          # Monitoring module content here
          EOF
          cat > terraform/modules/monitoring/variables.tf << 'EOF'
          # Variables content here
          EOF

      - name: Create Architecture Diagram
        run: |
          mkdir -p docs
          cat > docs/architecture.md << 'EOF'
          # Architecture content here
          EOF

      - name: Create Fluent Bit Config
        run: |
          cat > fluent-bit.conf << 'EOF'
          # Fluent Bit config content here
          EOF

      - name: Commit Changes
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add .
          git commit -m "Add monitoring infrastructure and documentation"
          git push

  build-and-push:
    name: Build and Push Images
    needs: create-monitoring
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_NAME }}-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push frontend with Fluent Bit
          docker build -t $ECR_REGISTRY/${{ env.PROJECT_NAME }}-frontend:$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/${{ env.PROJECT_NAME }}-frontend:$IMAGE_TAG
          
          # Build and push backend with Fluent Bit
          docker build -t $ECR_REGISTRY/${{ env.PROJECT_NAME }}-backend:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/${{ env.PROJECT_NAME }}-backend:$IMAGE_TAG

  terraform:
    name: Deploy Infrastructure
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_NAME }}-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: terraform
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform
        run: terraform plan -var="container_tag=${{ github.sha }}" -out=tfplan

      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve tfplan

  verify-deployment:
    name: Verify Deployment
    needs: terraform
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ env.PROJECT_NAME }}-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify CloudWatch Alarms
        run: |
          aws cloudwatch describe-alarms \
            --alarm-names \
              "${PROJECT_NAME}-ecs-cpu-utilization" \
              "${PROJECT_NAME}-ecs-memory-utilization" \
              "${PROJECT_NAME}-alb-5xx-errors"

      - name: Verify Fluent Bit Logs
        run: |
          aws logs describe-log-groups \
            --log-group-name-prefix "/ecs/${PROJECT_NAME}"
